import json

import main
import datetime
import asyncio
import os

from aiogram import types, Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters.command import CommandObject,  Command
from aiogram.filters import CommandStart
from kbrd import reply, inline
from aiogram.types import ReplyKeyboardRemove,ErrorEvent
from aiogram.types import FSInputFile
from aiogram.types.input_media_photo import InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup,State
from dotenv import find_dotenv,load_dotenv
load_dotenv(find_dotenv())

from midlware.isadmin import adm_list

usr_prvt_router = Router()
manager = str(os.getenv('MANAGER'))
mngr_contact_chat_id = os.getenv('CONTACT_CHAT_ID')
mngr_contact_msg_id = os.getenv('CONTACT_MESSAGE_ID')

class check_sizes(StatesGroup):
    pod_grud = State()
    grud = State()

class mail_id(StatesGroup):
    id = State()

class mailing(StatesGroup):
    mail_message = State()

async def check_class(user):
    with open('data/user_data.JSON') as file:
        user_data = json.load(file)
    clas = user_data[str(user)].get('class')
    return clas

async def main_kb(user_id,kb):
    if kb == 'main':
        if user_id in adm_list:
            return reply.adm_main_menu_kb
        else:
            return reply.main_menu_kb
    if kb == 'promo':
        if user_id in adm_list:
            return reply.adm_promobot_main_menu_kb
        else:
            return reply.promobot_main_menu_kb

async def output_data(message, clas):
    await main.user_data_upd(message.from_user.id, 'class', clas)
    await main.user_data_upd(message.from_user.id, 'page', '0')
    path_data = await main.check_selected_path(message.from_user.id)
    await message.answer(text= path_data[1]+' --> –†–∞–∑–º–µ—Ä: '+path_data[2],
        reply_markup=reply.ReplyKeyboardRemove())
    await main.filter_parsing(message.from_user.id)
    output_list = await main.output_list(message.from_user.id)
    with open('data/output_product_data.JSON') as file:
        product_data = json.load(file)
    for n in output_list:
        try:
            if await main.check_like(n, message.from_user.id) == False:
                kb = inline.get_keyboard_fab()
            if await main.check_like(n, message.from_user.id) == True:
                kb = inline.liked_page_kb()
            capt = dict(product_data[n])
            img = capt['img_path'] + 'img0.jpg'
            b = await message.answer_photo(photo=FSInputFile(img), caption=str('<b>' + capt['name']) + '</b>\n' + capt[
                'description'] + "\n\n–¶–µ–Ω–∞:" + str(capt['price']) + "\n–ê—Ä—Ç–∏–∫—É–ª:" + str(capt['article'] + '\n<b>[1/' + str(capt['img_count']) + ']</b>'), reply_markup=kb,
                                           parse_mode='HTML')
            await asyncio.sleep(1)
            await main.data_message(b.message_id, n, 'img0.jpg', [1, capt['img_count']] )
        except:
            capt = dict(product_data[n])
            with open('logs.txt','a') as file:
                file.write('\n–¢–æ–≤–∞—Ä '+str(capt['article'])+' –Ω–µ –ø—Ä–æ–≥—Ä—É–∑–∏–ª—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ')
    await message.answer(
        '<b>–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚úâÔ∏è\"\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ \"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è\"</b>',
        reply_markup=reply.tovar_list_kb, parse_mode=ParseMode.HTML)
    await main.user_data_upd(message.from_user.id, 'status', 1)


@usr_prvt_router.message(CommandStart())
async def strt_cmd(message: types.Message):
    check_promobot = await main.check_newcomer(message.from_user.id)
    if check_promobot == 1:
        kb = await main_kb(message.from_user.id,'promo')
        promo_bot_img = FSInputFile('promo_bot.jpg')
        await message.answer_photo(photo=promo_bot_img, caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è üëô\n\nüéÅ–ü–æ –ø—Ä–æ–º–æ–∫–æ–¥—É ¬´–ë–û–¢¬ª –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–∫–∞–∑–µ  ‚Äî —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è  –∫–æ—Å–º–µ—Ç–∏—á–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫.\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ==> –ö–∞—Ç–∞–ª–æ–≥\n\nüîó–ù–∞—à –æ—Å–Ω–æ–≤–∞–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç \n–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã —Å –Ω–∞—à–∏–º –±—Ä–µ–Ω–¥–æ–º. –í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏, –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã –∏ –∫–ª–∞—Å—Å–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Ç–∞–º.\n\n\n___\n*–ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∑–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.\n**–ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 3000 —Ä—É–±–ª–µ–π.\n***–Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞.')
        await message.answer('–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ==> –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
                            reply_markup=kb)
    else:
        kb = await main_kb(message.from_user.id, 'main')
        await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ==> –ö–∞—Ç–∞–ª–æ–≥üëô', reply_markup = kb)
    await main.clear_user_product_list(message.from_user.id)

"""–ö–Ω–æ–ø–∫–∏ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
@usr_prvt_router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥üëô')
async def first_size_cmd(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=reply.type_kb)


@usr_prvt_router.message(F.text == '–ú–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ‚ù§Ô∏è')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    products_list = await main.liked_products(message.from_user.id)
    if products_list == []:
        await message.answer('–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ \"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ\"', reply_markup=reply.liked_list_kb)
    else:
        with open('data/output_product_data.JSON') as file:
            product_data = json.load(file)
        output_list = []
        for n in products_list:
            if n in product_data:
                output_list.append(n)
        if output_list == []:
            await message.answer('–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç', reply_markup=reply.liked_list_kb)
        else:
            for n in output_list:
                try:
                    if await main.check_like(n, message.from_user.id) == False:
                        kb = inline.get_keyboard_fab()
                    if await main.check_like(n, message.from_user.id) == True:
                        kb = inline.liked_page_kb()
                    capt = dict(product_data[n])
                    img = capt['img_path'] + 'img0.jpg'
                    b = await message.answer_photo(photo=FSInputFile(img),
                                                   caption=str('<b>' + capt['name']) + '</b>\n' + capt[
                                                       'description'] + "\n\n–¶–µ–Ω–∞:" + str(
                                                       capt['price']) + "\n–ê—Ä—Ç–∏–∫—É–ª:" + str(capt['article']+ '\n<b>[1/' + str(capt['img_count']) + ']</b>'),
                                                   reply_markup=kb,
                                                   parse_mode='HTML')
                    await asyncio.sleep(1)
                    await main.data_message(b.message_id, n, 'img0.jpg', [1, capt['img_count']] )
                except:
                    capt = dict(product_data[n])
                    with open('logs.txt', 'a') as file:
                        file.write('\n–¢–æ–≤–∞—Ä ' + str(capt['article']) + ' –Ω–µ –ø—Ä–æ–≥—Ä—É–∑–∏–ª—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º')
        await message.answer('<b>–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚úâÔ∏è\"\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ \"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è\"</b>', reply_markup=reply.liked_list_kb,parse_mode=ParseMode.HTML)
    await main.user_data_upd(message.from_user.id, 'status', 1)

#--------------------------–ö–Ω–æ–ø–∫–∏ —Ç–∏–ø–∞
@usr_prvt_router.message(F.text=='–û–¥–µ–∂–¥–∞üëö')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await main.user_data_upd(message.from_user.id, '—Ç–∏–ø', '–æ–¥–µ–∂–¥–∞')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=reply.cloth_class_kb)
    await main.user_data_upd(message.from_user.id, 'status', 1)

@usr_prvt_router.message(F.text=='–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µüëô')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await main.user_data_upd(message.from_user.id, '—Ç–∏–ø', '–Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=reply.undw_class_kb)
    await main.user_data_upd(message.from_user.id, 'status', 1)



#--------------------------–ö–Ω–æ–ø–∫–∏ —Ü–≤–µ—Ç–∞

@usr_prvt_router.message(F.text=='\"XS\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','XS')
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä–†','–•S')
    await output_data(message, clas)


@usr_prvt_router.message(F.text=='\"S\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','S')
    await output_data(message, clas)


@usr_prvt_router.message(F.text=='\"M\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','M')
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä–†','–ú')
    await output_data(message, clas)


@usr_prvt_router.message(F.text=='\"L\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','L')
    await output_data(message, clas)


@usr_prvt_router.message(F.text=='\"XL\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','XL')
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä–†','–•L')
    await output_data(message, clas)


@usr_prvt_router.message(F.text=='\"XXL\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','XXL')
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä–†','–•–•L')
    await output_data(message, clas)


@usr_prvt_router.message(F.text=='\"XXXL\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','XXXL')
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä–†','–•–•–•L')
    await output_data(message, clas)


@usr_prvt_router.message(F.text=='\"XXXXL\"')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    clas = await check_class(message.from_user.id)
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä','XXXXL')
    await main.user_data_upd(message.from_user.id,'–†–∞–∑–º–µ—Ä–†','–•–•–•–•L')
    await output_data(message, clas)

#----------------------------------------------------–ö–Ω–æ–ø–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞
#-----------–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ

async def class_usr_prvt(clas,message):
    await main.user_data_upd(message.from_user.id, 'class', clas)
    size = await main.check_size(clas, message.from_user.id)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π –Ω–∏–∂–µ', reply_markup=reply.size_kb(size))
    if clas == '–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã –∏ –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä—ã' or clas == '–ö–æ–º–ø–ª–µ–∫—Ç—ã –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è':
        await message.answer_photo(FSInputFile('bel_table.jpg'))
    if clas == '–ü–∏–∂–∞–º—ã —Å –±—Ä—é–∫–∞–º–∏' or clas == '–ü–∏–∂–∞–º—ã —Å —à–æ—Ä—Ç–∞–º–∏':
        await message.answer_photo(FSInputFile('table.jpg'))
    await main.user_data_upd(message.from_user.id, 'status', 1)


@usr_prvt_router.message(F.text=='–ë–∞–∑–æ–≤—ã–µ –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä—ã‚ù§Ô∏è')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await class_usr_prvt('–ë–∞–∑–æ–≤—ã–µ –±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä—ã', message)


@usr_prvt_router.message(F.text=='–°–µ–∫—Å—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç‚ù§Ô∏è‚Äçüî•')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await class_usr_prvt('–ö–æ–º–ø–ª–µ–∫—Ç—ã –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è', message)


#-----------–ü–∏–∂–∞–º—ã
@usr_prvt_router.message(F.text=='–ü–∏–∂–∞–º—ã —Å –±—Ä—é–∫–∞–º–∏üëñ')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await class_usr_prvt('–ü–∏–∂–∞–º—ã —Å –±—Ä—é–∫–∞–º–∏', message)


@usr_prvt_router.message(F.text=='–ü–∏–∂–∞–º—ã —Å —à–æ—Ä—Ç–∞–º–∏ü©≥')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await class_usr_prvt('–ü–∏–∂–∞–º—ã —Å —à–æ—Ä—Ç–∞–º–∏', message)

#----------------------------------------------------

@usr_prvt_router.message(F.text=='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è')
async def first_size_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    check_promobot = await main.check_newcomer(message.from_user.id)
    if check_promobot == 1:
        kb = await main_kb(message.from_user.id, 'promo')
        await message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ==> –ö–∞—Ç–∞–ª–æ–≥üëô', reply_markup=kb)
    else:
        kb = await main_kb(message.from_user.id, 'main')
        await message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ==> –ö–∞—Ç–∞–ª–æ–≥üëô', reply_markup=kb)
    await main.clear_user_product_list(message.from_user.id)


@usr_prvt_router.message(F.text=='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥üéÅ')
async def first_size_cmd(message: types.Message):
    check_promobot = await main.check_newcomer(message.from_user.id)
    if check_promobot == 1:
        kb = await main_kb(message.from_user.id, 'promo')
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                             reply_markup=kb)
    if check_promobot == 2:
        kb = await main_kb(message.from_user.id, 'main')
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω',
                             reply_markup=kb)
@usr_prvt_router.message(check_sizes.pod_grud)
async def first_size_cmd(message: types.Message, state: FSMContext):
    await state.update_data(pod_grud=message.text)
    await state.set_state(check_sizes.grud)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –≤–∞—à–µ–π –ì–†–£–î–ò –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö')

@usr_prvt_router.message(check_sizes.grud)
async def first_size_cmd(message: types.Message, state: FSMContext):
    await state.update_data(grud=message.text)
    data = await state.get_data()
    await main.update_size_data(message.from_user.id,data)
    await state.clear()
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n–î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚úâÔ∏è\"',reply_markup=reply.after_enter_sizes)


async def mngr_msg(message, state, bot,action = 0):
    with open('data/user_data.JSON', 'r') as file:
        user_data = json.load(file)
    check_bel_in_liked_list = await main.check_bel_in_liked_list(message.from_user.id)
    if check_bel_in_liked_list == 1:
        check_size_data = await main.check_size_data(message.from_user.id)
        if check_size_data == 1:
            article_list = await main.mngr_msg(message.from_user.id)
            sizes = await main.mngr_sizes_msg(message.from_user.id)
            await main.user_data_upd(message.from_user.id, 'status', 1)
            if action == 1:
                await bot.copy_message(chat_id=manager, from_chat_id=manager,
                                       message_id=user_data[str(message.from_user.id)].get('number_msg'))
            check_promobot = await main.check_newcomer(message.from_user.id)
            if check_promobot == 1:
                kb = await main_kb(message.from_user.id, 'promo')
                await message.answer('–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
                await message.answer(
                    '‚ù£Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–æ—á–∫–µ:\n\n\n–ö–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç—å—Ç–µ –∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫–∏\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–µ–∑ 8 –∏–ª–∏ +7 –≤ –Ω–∞—á–∞–ª–µü•∞',
                    reply_markup=kb)
                if article_list == []:
                    msg = await bot.send_message(chat_id=manager,
                                           text='–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç' + '\n\nuser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(
                                               message.from_user.id) + '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[
                                                    str(message.from_user.id)].get(
                                               'phone_number') + '\n_______________________________ ',
                                           reply_markup=inline.mngr_msg_btn())
                    await main.mngr_data_message(msg.message_id, message.from_user.id)
                else:
                    msg = await bot.send_message(chat_id=manager,
                                           text='‚¨ÜÔ∏è–¢–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º‚¨ÜÔ∏è\n' + article_list + '\n\n–û–±—Ö–≤–∞—Ç –ø–æ–¥ –≥—Ä—É–¥—å—é = ' +
                                                sizes[0] + '\n–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ = ' + sizes[
                                                    1] + '\n\nUser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(
                                               message.from_user.id) + '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[
                                                    str(message.from_user.id)].get(
                                               'phone_number') + '\n_______________________________ ',
                                           reply_markup=inline.mngr_msg_btn())
                    await main.mngr_data_message(msg.message_id,message.from_user.id)
            else:
                kb = await main_kb(message.from_user.id, 'main')
                await message.answer('–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
                await message.answer(
                    '‚ù£Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–æ—á–∫–µ:\n\n\n–ö–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç—å—Ç–µ –∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫–∏\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–µ–∑ 8 –∏–ª–∏ +7 –≤ –Ω–∞—á–∞–ª–µü•∞',
                    reply_markup=kb)
                if article_list == []:
                    await bot.send_message(chat_id=manager,
                                           text='–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç' + '\n\nuser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(
                                               message.from_user.id)+ '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[str(message.from_user.id)].get('phone_number')+'\n_______________________________ ')
                else:
                    await bot.send_message(chat_id=manager,
                                           text='‚¨ÜÔ∏è–¢–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º‚¨ÜÔ∏è\n' + article_list + '\n\n–û–±—Ö–≤–∞—Ç –ø–æ–¥ –≥—Ä—É–¥—å—é = ' +
                                                sizes[0] + '\n–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ = ' + sizes[
                                                    1] + '\n\nUser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(message.from_user.id)+ '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[str(message.from_user.id)].get('phone_number')+'\n_______________________________ ')
        if check_size_data == 0:
            await message.answer(
                '–í —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞, –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö')
            await state.clear()
            await state.set_state(check_sizes.pod_grud)
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –ü–û–î –ì–†–£–î–¨–Æ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö', reply_markup=ReplyKeyboardRemove())

    if check_bel_in_liked_list == 0:
        article_list = await main.mngr_msg(message.from_user.id)
        if action == 1:
            await bot.copy_message(chat_id=manager, from_chat_id=manager,
                                   message_id=user_data[str(message.from_user.id)].get('number_msg'))
        check_promobot = await main.check_newcomer(message.from_user.id)
        if check_promobot == 1:
            kb = await main_kb(message.from_user.id, 'promo')
            await message.answer('–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
            await message.answer(
                '‚ù£Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–æ—á–∫–µ:\n\n\n–ö–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç—å—Ç–µ –∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫–∏\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–µ–∑ 8 –∏–ª–∏ +7 –≤ –Ω–∞—á–∞–ª–µü•∞',
                reply_markup=kb)
            if article_list == []:
                await main.user_data_upd(message.from_user.id, 'status', 1)
                msg = await bot.send_message(chat_id=manager,
                                       text='–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç' + '\n\nuser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(
                                           message.from_user.id) + '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[
                                                str(message.from_user.id)].get(
                                           'phone_number') + '\n_______________________________ ',
                                           reply_markup=inline.mngr_msg_btn())
                await main.mngr_data_message(msg.message_id, message.from_user.id)
            else:
                await main.user_data_upd(message.from_user.id, 'status', 1)
                msg = await bot.send_message(chat_id=manager,
                                       text='‚¨ÜÔ∏è–¢–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º‚¨ÜÔ∏è\n' + article_list + '\n\nuser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(
                                           message.from_user.id) + '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[
                                                str(message.from_user.id)].get(
                                           'phone_number') + '\n_______________________________ ',
                                           reply_markup=inline.mngr_msg_btn())
                await main.mngr_data_message(msg.message_id, message.from_user.id)

        else:
            kb = await main_kb(message.from_user.id, 'main')
            await message.answer('–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
            await message.answer(
                '‚ù£Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–æ—á–∫–µ:\n\n\n–ö–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç—å—Ç–µ –∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫–∏\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–µ–∑ 8 –∏–ª–∏ +7 –≤ –Ω–∞—á–∞–ª–µü•∞',
                reply_markup=kb)
            if article_list == []:
                await main.user_data_upd(message.from_user.id, 'status', 1)
                await bot.send_message(chat_id=manager, text='–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç' + '\n\nuser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(
                    message.from_user.id)+ '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[str(message.from_user.id)].get('phone_number')+'\n_______________________________ ')
            else:
                await main.user_data_upd(message.from_user.id, 'status', 1)
                await bot.send_message(chat_id=manager,
                                       text='‚¨ÜÔ∏è–¢–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º‚¨ÜÔ∏è\n' + article_list + '\n\nuser_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(
                                           message.from_user.id)+ '\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + user_data[str(message.from_user.id)].get('phone_number')+'\n_______________________________ ')


@usr_prvt_router.message(F.text=='–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚úâÔ∏è')
async def first_size_cmds(message: types.Message, state: FSMContext, bot: Bot):
    await main.clear_user_product_list(message.from_user.id)
    await main.user_data_upd(message.from_user.id, 'status', 0)
    bl_check = await main.check_bl(message.from_user.id)
    if bl_check == 0:
        numb_check = await main.check_number(message.from_user.id)
        if numb_check == 1:
            await mngr_msg(message,state,bot,1)
        if numb_check == 0:
            await message.answer('–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', reply_markup=reply.number_kb)
    if bl_check == 1:
        pass
    if bl_check == 2:
        check_promobot = await main.check_newcomer(message.from_user.id)
        if check_promobot == 1:
            kb = await main_kb(message.from_user.id, 'promo')
            await message.answer('–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞',
                                 reply_markup=kb)
        else:
            kb = await main_kb(message.from_user.id, 'main')
            await message.answer('–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞',
                                 reply_markup=kb)
    await main.user_data_upd(message.from_user.id, 'status', 1)


@usr_prvt_router.message(F.text=='–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ‚úçÔ∏è')
async def first_size_cmd(message: types.Message,bot: Bot):
    await main.counter()
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await bot.copy_message(chat_id=message.from_user.id,from_chat_id=mngr_contact_chat_id,message_id=int(mngr_contact_msg_id))
    check_promobot = await main.check_newcomer(message.from_user.id)
    if check_promobot == 1:
        kb = await main_kb(message.from_user.id, 'promo')
        await message.answer('–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ—Å–∏–º  —É–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä, —Ä–∞–∑–º–µ—Ä –∏ –ø—Ä–æ–º–æ–∫–æ–¥ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üå∏')
        await message.answer('‚ù£Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–æ—á–∫–µ:\n\n\n–ö–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç—å—Ç–µ –∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫–∏\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–µ–∑ 8 –∏–ª–∏ +7 –≤ –Ω–∞—á–∞–ª–µü•∞',
                             reply_markup=kb)
    else:
        kb = await main_kb(message.from_user.id, 'main')
        await message.answer('–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ—Å–∏–º  —É–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä, —Ä–∞–∑–º–µ—Ä –∏ –ø—Ä–æ–º–æ–∫–æ–¥ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏) —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üå∏')
        await message.answer('‚ù£Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–æ—á–∫–µ:\n\n\n–ö–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç—å—Ç–µ –∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫–∏\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–µ–∑ 8 –∏–ª–∏ +7 –≤ –Ω–∞—á–∞–ª–µü•∞',
                             reply_markup=kb)
    await main.clear_user_product_list(message.from_user.id)
    await main.user_data_upd(message.from_user.id, 'status', 1)


@usr_prvt_router.message(F.contact)
async def first_size_cmds(message: types.Message, state: FSMContext, bot: Bot):
    msg = await message.forward(chat_id=manager)
    await main.user_data_upd(message.from_user.id, 'phone_number', message.contact.phone_number)
    await main.user_data_upd(message.from_user.id, 'number_msg', msg.message_id)
    await main.user_data_upd(message.from_user.id, 'number', 1)
    await mngr_msg(message,state,bot)

@usr_prvt_router.message(F.text=='–ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤‚ûï')
async def first_size_cmd(message: types.Message):
    await main.user_data_upd(message.from_user.id, 'status', 0)
    await main.filter_parsing(message.from_user.id)
    output_list = await main.output_list(message.from_user.id)
    if output_list == False:
        await message.answer(
            '<b>–¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n\n–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚úâÔ∏è\"\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ \"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è\"</b>',
            reply_markup=reply.tovar_list_kb, parse_mode=ParseMode.HTML)
    else:
        with open('data/output_product_data.JSON') as file:
            product_data = json.load(file)
        for n in output_list:
            capt = dict(product_data[n])
            try:
                if await main.check_like(n, message.from_user.id) == False:
                    kb = inline.get_keyboard_fab()
                if await main.check_like(n, message.from_user.id) == True:
                    kb = inline.liked_page_kb()
                img = capt['img_path'] + 'img0.jpg'
                b = await message.answer_photo(photo=FSInputFile(img), caption=str('<b>' + capt['name']) + '</b>\n' + capt[
                    'description'] + "\n\n–¶–µ–Ω–∞:" + str(capt['price']) + "\n–ê—Ä—Ç–∏–∫—É–ª:" + str(capt['article']+ '\n<b>[1/' + str(capt['img_count']) + ']</b>'), reply_markup=kb,
                                               parse_mode='HTML')
                await asyncio.sleep(1)
                await main.data_message(b.message_id, n, 'img0.jpg', [1, capt['img_count']] )
            except:
                with open('logs.txt', 'a') as file:
                    file.write('\n–¢–æ–≤–∞—Ä ' + str(capt['article']) + ' –Ω–µ –ø—Ä–æ–≥—Ä—É–∑–∏–ª—Å—è –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞')
        await message.answer(
            '<b>–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚úâÔ∏è\"\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ \"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è\"</b>',
            reply_markup=reply.tovar_list_kb, parse_mode=ParseMode.HTML)
        await main.user_data_upd(message.from_user.id, 'status', 1)

@usr_prvt_router.callback_query(F.data == "change_prev")
async def update_num_text_fab(callback: types.CallbackQuery):
    b = await main.get_img(callback.message.message_id,'prev')
    capt = await main.capt_pag(callback.message.message_id, 'prev')
    photo = FSInputFile(b[1]+b[0])
    await callback.message.edit_media(InputMediaPhoto(media=photo,caption=capt[0], parse_mode='HTML'),reply_markup=inline.get_keyboard_fab())
    await main.upd_data_message(callback.message.message_id, b[2], b[0],capt[1])


@usr_prvt_router.callback_query(F.data == "change_next")
async def update_num_text_fab(callback: types.CallbackQuery):
    b = await main.get_img(callback.message.message_id,'next')
    capt = await main.capt_pag(callback.message.message_id,'next')
    photo = FSInputFile(b[1]+b[0])
    await callback.message.edit_media(InputMediaPhoto(media=photo,caption=capt[0], parse_mode='HTML'),reply_markup=inline.get_keyboard_fab())
    await main.upd_data_message(callback.message.message_id, b[2], b[0],capt[1])


@usr_prvt_router.callback_query(F.data == "add")
async def update_num_text_fab(callback: types.CallbackQuery):
    a = await main.like_product(callback.message.message_id, callback.from_user.id)
    if a == False:
        await callback.answer(text='–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º', show_alert=True)
    else:
        await callback.answer(text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=inline.liked_page_kb())


@usr_prvt_router.callback_query(F.data == "change_prev_del")
async def update_num_text_fab(callback: types.CallbackQuery):
    a = await main.filter_parsing(callback.from_user.id)
    b = await main.get_img(callback.message.message_id,'prev')
    capt = await main.capt_pag(callback.message.message_id,'prev')
    photo = FSInputFile(b[1]+b[0])
    await callback.message.edit_media(InputMediaPhoto(media=photo, caption=capt[0], parse_mode='HTML'),
                                      reply_markup=inline.liked_page_kb())
    await main.upd_data_message(callback.message.message_id, b[2], b[0],capt[1])


@usr_prvt_router.callback_query(F.data == "change_next_del")
async def update_num_text_fab(callback: types.CallbackQuery):
    a = await main.filter_parsing(callback.from_user.id)
    b = await main.get_img(callback.message.message_id,'next')
    capt = await main.capt_pag(callback.message.message_id,'next')
    photo = FSInputFile(b[1]+b[0])
    await callback.message.edit_media(InputMediaPhoto(media=photo, caption=capt[0], parse_mode='HTML'),
                                      reply_markup=inline.liked_page_kb())
    await main.upd_data_message(callback.message.message_id, b[2], b[0],capt[1])


@usr_prvt_router.callback_query(F.data == "delete")
async def update_num_text_fab(callback: types.CallbackQuery):
    a = await main.unlike_product(callback.message.message_id, callback.from_user.id)
    if a == False:
        await callback.answer(text='–¢–æ–≤–∞—Ä —É–∂–µ —É–¥–∞–ª–µ–Ω', show_alert=True)
    else:
        await callback.answer(text='–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=inline.get_keyboard_fab())


@usr_prvt_router.callback_query(F.data == "promo_is_activated")
async def update_num_text_fab(callback: types.CallbackQuery):
    capt = callback.message.text
    user = await main.check_mngr_msg(callback.message.message_id)
    await main.user_data_upd(user,"promo_bot",2)
    await callback.message.edit_reply_markup(reply_markup = inline.back_mngr_msg_btn())
    await callback.answer(text='–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω', show_alert=True)

@usr_prvt_router.callback_query(F.data == "promo_is_deactivated")
async def update_num_text_fab(callback: types.CallbackQuery):
    capt = callback.message.text
    user = await main.check_mngr_msg(callback.message.message_id)
    await main.user_data_upd(user,"promo_bot",1)
    await callback.message.edit_reply_markup(reply_markup = inline.mngr_msg_btn())
    await callback.answer(text='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–æ–∑–≤–∞–Ω', show_alert=True)



@usr_prvt_router.message(F.text=='–†–∞—Å—Å—ã–ª–∫–∞')
async def test_size_cmd(message: types.Message):
    if message.from_user.id in adm_list:

        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                             reply_markup=reply.mail_menu)


@usr_prvt_router.message(F.text=='–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def test_size_cmd(message: types.Message, state: FSMContext):
    if message.from_user.id in adm_list:
        await state.clear()
        await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
                             reply_markup=reply.back_to_menu)
        await state.set_state(mailing.mail_message)


@usr_prvt_router.message(mailing.mail_message)
async def solo_upd(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(mail_message = message.message_id)
    mail = await state.get_data()
    await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id,
                           message_id=mail['mail_message'], reply_markup=inline.adm_confirm_mail())
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –µ–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
    await state.clear()


@usr_prvt_router.callback_query(F.data == "confirm_mail")
async def solo_upd(callback: types.CallbackQuery, state: FSMContext):
    mail_id = await main.add_mail(callback.from_user.id, callback.message.message_id)
    await callback.message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. ID —Ä–∞—Å—Å—ã–ª–∫–∏: '+ str(mail_id),
                                  reply_markup=reply.mail_menu)
    await state.clear()


@usr_prvt_router.callback_query(F.data == "confirm_mail_back")
async def solo_upd(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(mailing.mail_message)
    await callback.message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
                         reply_markup=reply.back_to_menu)


@usr_prvt_router.callback_query(F.data == "back_to_main")
async def solo_upd(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    check_promobot = await main.check_newcomer(callback.message.from_user.id)
    if check_promobot == 1:
        kb = await main_kb(callback.message.from_user.id, 'promo')
        await callback.message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ==> –ö–∞—Ç–∞–ª–æ–≥üëô', reply_markup=kb)
    else:
        kb = await main_kb(callback.message.from_user.id, 'main')
        await callback.message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ==> –ö–∞—Ç–∞–ª–æ–≥üëô', reply_markup=kb)
    await main.clear_user_product_list(callback.message.from_user.id)


@usr_prvt_router.message(F.text=='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def test_size_cmd(message: types.Message, state: FSMContext):
    if message.from_user.id in adm_list:
        await state.clear()
        await state.set_state(mail_id.id)
        await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ä–∞—Å—Å—ã–ª–∫–∏',
                             reply_markup=reply.back_to_menu)

@usr_prvt_router.message(mail_id.id)
async def solo_upd(message: types.Message, state: FSMContext, bot: Bot):
    if message.from_user.id in adm_list:
        await state.update_data(id = message.text)
        msg_id = await main.get_mail(message.text)
        if msg_id == 0:
            await message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',reply_markup=reply.mail_menu)
        else:
            await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id,
                                message_id=msg_id, reply_markup=inline.start_mail())

@usr_prvt_router.callback_query(F.data == "start_mail")
async def solo_upd(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    mail_id = await state.get_data()
    mail_id = mail_id['id']
    mail_status = await main.get_status(mail_id)
    if mail_status == 0:
        await main.add_mail_start_date(mail_id, callback.from_user.id)
        from_chat = await main.chat_id(mail_id)
        await callback.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ –∞–¥–º–∏–Ω-–±–æ—Ç–µ',reply_markup=reply.back_to_menu)
        await main.set_status(mail_id, 2)
        while mail_status != 1 and mail_status !=3:
            await asyncio.sleep(10)
            users_list = await main.get_users(mail_id)
            if users_list != []:
                for user in users_list:
                    if str(user) == str(from_chat):
                        pass
                    else:
                        try:
                            await bot.copy_message(chat_id=user, from_chat_id= await main.chat_id(mail_id),
                                                   message_id=await main.get_mail(mail_id))
                        except:
                            with open('logs.txt', 'a') as file:
                                data_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                file.write('\n' + str(data_time) + '     –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '+user)
                    await asyncio.sleep(1)
                    mail_status = await main.get_status(mail_id)
            else:
                await main.set_status(mail_id,1)
                await state.clear()
    if mail_status == 1:
        await callback.message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞.', reply_markup=reply.mail_menu)
        await state.clear()
    if mail_status == 2:
        await callback.message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞', reply_markup=inline.stop_mail())
    if mail_status == 3:
        await callback.message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É.', reply_markup=reply.mail_menu)
        await state.clear()


@usr_prvt_router.callback_query(F.data == "stop_mail")
async def solo_upd(callback: types.CallbackQuery, state: FSMContext):
    mail_id = await state.get_data()
    mail_id = mail_id['id']
    await main.set_status(mail_id, 3)
    await callback.message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=reply.mail_menu)
    await state.clear()



@usr_prvt_router.error()
async def del_double_phpto(event: ErrorEvent,bot: Bot):
    message = event.update.message
    if str(event.exception) == 'Telegram server says - Bad Request: message to copy not found':

        await main.user_data_upd(message.from_user.id, 'number', 0)
        await main.user_data_upd(message.from_user.id, 'status', 1)
        await message.answer('–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', reply_markup=reply.number_kb)
        await bot.send_message(chat_id='',
                               text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ message to copy not found')
    else:
        try:
            action = event.update.callback_query.data
        except:
            action = '–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'
        try:
            msg_id = event.update.callback_query.message.message_id
        except:
            msg_id = '—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'
        data_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open('logs.txt', 'a') as file:
            file.write('\n'+str(data_time)+'    '+str(msg_id)+'     '+str(action))
        try:
            message = event.message
            await main.user_data_upd(message.from_user.id, 'status', 1)
        except:pass



